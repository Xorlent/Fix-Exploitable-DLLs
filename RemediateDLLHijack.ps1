# Get the user-specified path
$targetPath = Read-Host "Enter the starting search path"

# Create the file name with the current date
$fileName = (Get-Date).ToString("yyyy-MM-dd") + ".csv"
$rollbackPolicy = (Get-Date).ToString("yyyy-MM-dd") + "_Original.xml"
$newPolicy = (Get-Date).ToString("yyyy-MM-dd") + "_New.xml"

# Function to recursively check directories for DLL files without a valid signer certificate
function CheckDllSignatures($path) {
    $resultsList ='"Disposition","Affected EXE","Exploit","Related DLL"' + "`r`n"
    $files = Get-ChildItem -Path $path -Recurse -Filter "*.dll" -File -ErrorAction SilentlyContinue
    $hijackLibs = Invoke-RestMethod -Uri "https://hijacklibs.net/api/hijacklibs.json"

    foreach ($file in $files) {
        if($file.FullName.Contains("C:\Windows\WinSxS") -or $file.FullName.Contains("C:\Windows\SoftwareDistribution")){
        }
        else {
            $signature = Get-AuthenticodeSignature $file.FullName -ErrorAction SilentlyContinue
            if ($signature -eq $null -or $signature.Status -ne "Valid") {
                foreach ($record in $hijackLibs){
                    if($file.Name -eq $record.Name){
                        $checkOtherLocations = Get-Childitem –Path C:\ -Include $file.Name -File -Recurse -ErrorAction SilentlyContinue
                        $multSigCheck = 0
                        foreach ($dll in $checkOtherLocations){
                            $finalSigCheck = Get-AuthenticodeSignature $dll.FullName -ErrorAction SilentlyContinue
                            if($finalSigCheck.Status -eq "Valid"){
                                $multSigCheck += 1
                            }
                        }
                        if($multSigCheck -gt 0 -and $record.Vendor -eq "Microsoft"){
                            # Mitigate!!!
                            Set-ProcessMitigation -Enable MicrosoftSignedOnly -Name $file.Name
                            $resultsList = $resultsList + '"AUTO-MITIGATED!'  + '","' + $record.VulnerableExecutables[0].Path + '","' + $record.VulnerableExecutables[0].Type + '","' + $file.FullName + '"' + "`r`n"
                        }
                        else {
                            $resultsList = $resultsList + '"INTERVENTION REQD'  + '","' + $record.VulnerableExecutables[0].Path + '","' + $record.VulnerableExecutables[0].Type + '","' + $file.FullName + '"' + "`r`n"
                        }
                    }
                }
            }
        }
    }
    return $resultsList
}

Get-ProcessMitigation -RegistryConfigFilePath $rollbackPolicy

# Call the function to check DLL signatures
$Matches = CheckDllSignatures $targetPath

# Save the results to a CSV file
$Matches | Out-File $fileName -Force

Get-ProcessMitigation -RegistryConfigFilePath $newPolicy

# Display a message with the file path
Write-Host "Results saved to $((Get-Location).Path)\$fileName"
Write-Host "Original Process mitigation settings saved to $((Get-Location).Path)\$rollbackPolicy"
Write-Host "New Process mitigation settings saved to $((Get-Location).Path)\$newPolicy"